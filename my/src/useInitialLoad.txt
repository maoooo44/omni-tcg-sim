// src/hooks/useInitialLoad.ts

import { useEffect, useState } from 'react';
import { useCardData } from './useCardData'; // 💡 必須のインポート
import { usePackStore } from '../stores/packStore';
import { useCardPoolStore } from '../stores/cardPoolStore';
import { useUserDataStore } from '../stores/userDataStore';
import { useCurrencyStore } from '../stores/currencyStore';
// 💡 Zustandストアのアクション型を定義 (getState()でロードアクションを呼び出すため)
import type { PackState } from '../stores/packStore';
import type { CardPoolState } from '../stores/cardPoolStore';
import type { UserDataState } from '../stores/userDataStore';
import type { CurrencyState } from '../stores/currencyStore';

// ロードアクションを持つストアのインターフェースを統合
type StoreActions = Pick<PackState, 'loadPacks'> & 
                    Pick<CardPoolState, 'loadCardPool'> & 
                    Pick<UserDataState, 'loadUserData'> &
                    Pick<CurrencyState, 'loadCurrency'>;

/**
 * アプリケーションの初期起動時に必要な全てのデータ（カードデータ、ストアデータ）をロードするフック
 * @returns {boolean} 全てのデータロードが完了したら true
 */
export const useInitialLoad = (): boolean => {
    // 📌 修正: 存在しない 'isLoaded' を参照するデストラクチャリングを修正
    // useCardData() の戻り値である 'isCardDataLoaded' を直接デストラクチャリングします。
    const { isCardDataLoaded } = useCardData(); 
    const [isStoresLoaded, setIsStoresLoaded] = useState(false);
    
    useEffect(() => {
        if (!isCardDataLoaded) {
            return; 
        }

        const loadAllStores = async () => {
            
            // 📌 storeのgetState()の結果を 'unknown' 経由で StoreActions にキャスト
            const { loadPacks } = usePackStore.getState() as unknown as StoreActions;
            const { loadCardPool } = useCardPoolStore.getState() as unknown as StoreActions;
            const { loadUserData } = useUserDataStore.getState() as unknown as StoreActions;
            const { loadCurrency } = useCurrencyStore.getState() as unknown as StoreActions;

            try {
                console.log("Starting initial store data load...");
                
                await Promise.all([
                    loadPacks(), 
                    loadUserData(),
                    loadCardPool(),
                    loadCurrency(),
                ]);

                setIsStoresLoaded(true);
                console.log('✅ All initial store data loading completed.');

            } catch (error) {
                console.error('初期データロード中に致命的なエラーが発生しました:', error);
                setIsStoresLoaded(true);
            }
        };
        
        loadAllStores();
        
    }, [isCardDataLoaded]); 

    // カードデータとストアデータの両方がロード完了したら true を返す
    return isCardDataLoaded && isStoresLoaded;
};