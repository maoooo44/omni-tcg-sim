// src/features/card-pool/CardPoolManager.tsx

import React, { useMemo } from 'react'; 
import { 
    Box, Typography, Grid, Paper, Select, MenuItem, FormControl, 
    InputLabel, TextField, Pagination, ToggleButtonGroup, ToggleButton, 
    Button, Alert, Divider, Chip 
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import CloseIcon from '@mui/icons-material/Close';
import SortIcon from '@mui/icons-material/Sort';

import { useCardPoolDisplay, CARDS_PER_PAGE } from './hooks/useCardPoolDisplay';
import type { OwnedCardDisplay, CardPoolFilters, SortKey } from './hooks/useCardPoolDisplay'; 
// 🛠️ 修正: CardThumbnail の代わりに OpenerCard をインポート (TS2307 解消)
import OpenerCard from '../../components/OpenerCard'; 
import { useShallow } from 'zustand/react/shallow';
import { useUserDataStore } from '../../stores/userDataStore'; 

// OwnedCardItem コンポーネント定義
interface OwnedCardProps {
    card: OwnedCardDisplay;
    isDTCGEnabled: boolean;
}
const OwnedCardItem: React.FC<OwnedCardProps> = ({ card, isDTCGEnabled }) => {
    return (
        <Box sx={{ position: 'relative', width: '100%', maxWidth: 150 }}>
            {/* 🛠️ 修正: OpenerCard を使用し、コレクション表示用に Props を設定 */}
            <OpenerCard 
                cardData={card} 
                isRevealed={true} // コレクションでは常に表面を表示
                cardBackUrl={''} // 未使用だが OpenerCard のProps要件を満たす
                delay={0}        // 未使用だが OpenerCard のProps要件を満たす
            />
            {isDTCGEnabled && (
                <Chip 
                    label={`x${card.count}`} 
                    color="primary" 
                    size="small" 
                    sx={{ 
                        position: 'absolute', 
                        bottom: 4, 
                        right: 4, 
                        bgcolor: 'rgba(0,0,0,0.7)', 
                        color: 'white',
                        fontWeight: 'bold'
                    }} 
                />
            )}
        </Box>
    );
};


const CardPoolManager: React.FC = () => {
    
    const isDTCGEnabled = useUserDataStore(useShallow(state => state.isDTCGEnabled));

    const {
        loading,
        error,
        filteredCards,
        filter,
        setFilter,
        currentPage,
        totalPages,
        setCurrentPage,
        sortKey,
        setSortKey,
        sortOrder,
        setSortOrder,
        resetCollection,
    } = useCardPoolDisplay();
    
    const totalCount = useMemo(() => filteredCards.length, [filteredCards]);
    const startIndex = (currentPage - 1) * CARDS_PER_PAGE;
    const endIndex = startIndex + CARDS_PER_PAGE;
    const cardsOnPage = useMemo(() => filteredCards.slice(startIndex, endIndex), [filteredCards, startIndex, endIndex]);

    const handleFilterChange = (key: keyof CardPoolFilters, value: string | number | null) => {
        setFilter({ [key]: value });
        setCurrentPage(1); 
    };

    const handleClearSearch = () => {
        setFilter({ search: '' });
        setCurrentPage(1);
    };

    const handleSortChange = (
        _event: React.MouseEvent<HTMLElement>,
        newSortKey: string | null,
    ) => {
        if (newSortKey && newSortKey === sortKey) {
            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
        } else if (newSortKey) {
            setSortKey(newSortKey as SortKey);
            setSortOrder('asc');
        }
    };
    
    if (loading) {
        return (
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
                <Typography>カードデータをロード中...</Typography>
            </Box>
        );
    }

    if (error) {
        return (
            <Alert severity="error" sx={{ my: 2 }}>
                カードプールのロードに失敗しました: {error.message}
            </Alert>
        );
    }

    return (
        <Box sx={{ flexGrow: 1, p: 2 }}>
            <Typography variant="h4" gutterBottom>
                カードコレクション管理
            </Typography>
            <Divider sx={{ mb: 3 }} />

            <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
                <Typography variant="h6" gutterBottom>フィルターと並び替え</Typography>
                
                {/* Grid container */}
                <Grid container spacing={2}>
                    
                    <Grid size={{ xs: 12, md: 4 }}> 
                        <Box sx={{ display: 'flex', alignItems: 'flex-end', gap: 1 }}>
                            <SearchIcon color="action" sx={{ mb: 1.5 }} />
                            <TextField 
                                label="カード名で検索"
                                fullWidth
                                value={filter.search || ''}
                                onChange={(e) => handleFilterChange('search', e.target.value)}
                            />
                            {filter.search && (
                                <Button onClick={handleClearSearch} size="small" sx={{ mb: 0.5 }}>
                                    <CloseIcon />
                                </Button>
                            )}
                        </Box>
                    </Grid>
                    
                    <Grid size={{ xs: 6, md: 2 }}>
                        <FormControl fullWidth>
                            <InputLabel>パック</InputLabel>
                            <Select
                                value={filter.packId || 'all'}
                                label="パック"
                                onChange={(e) => handleFilterChange('packId', e.target.value === 'all' ? null : e.target.value)}
                            >
                                <MenuItem value="all">全て</MenuItem>
                                <MenuItem value="pack-a">パックA</MenuItem> 
                            </Select>
                        </FormControl>
                    </Grid>
                    
                    <Grid size={{ xs: 6, md: 2 }}>
                        <FormControl fullWidth>
                            <InputLabel>レアリティ</InputLabel>
                            <Select
                                value={filter.rarity || 'all'}
                                label="レアリティ"
                                onChange={(e) => handleFilterChange('rarity', e.target.value === 'all' ? null : e.target.value)}
                            >
                                <MenuItem value="all">全て</MenuItem>
                                <MenuItem value="Common">Common</MenuItem>
                                <MenuItem value="Rare">Rare</MenuItem>
                            </Select>
                        </FormControl>
                    </Grid>
                    
                    <Grid size={{ xs: 12, md: 4 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', height: '100%', gap: 1 }}>
                            <SortIcon color="action" />
                            <ToggleButtonGroup
                                value={sortKey} 
                                exclusive
                                onChange={handleSortChange}
                                size="small"
                                aria-label="card sort"
                                sx={{ flexGrow: 1 }}
                            >
                                <ToggleButton value="name" aria-label="name">
                                    名前
                                </ToggleButton>
                                <ToggleButton value="pack" aria-label="pack">
                                    パック
                                </ToggleButton>
                                {isDTCGEnabled && (
                                    <ToggleButton value="count" aria-label="count">
                                        枚数
                                    </ToggleButton>
                                )}
                            </ToggleButtonGroup>
                            
                            {sortKey && (
                                <Button 
                                    onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                                    size="small"
                                >
                                    {sortOrder === 'asc' ? '昇順' : '降順'}
                                </Button>
                            )}
                        </Box>
                    </Grid>

                    <Grid size={{ xs: 12 }} sx={{ mt: 2 }}>
                        <Button 
                            variant="outlined" 
                            color="error" 
                            onClick={resetCollection} 
                            size="small"
                        >
                            コレクションをリセット
                        </Button>
                    </Grid>

                </Grid>
            </Paper>

            <Typography variant="h6" sx={{ mt: 3 }}>
                合計 {totalCount} 件のカードを表示中
            </Typography>

            {/* カード表示エリア */}
            <Box sx={{ mt: 3, minHeight: 400 }}>
                {totalCount === 0 ? (
                    <Alert severity="info">
                        表示できるカードがありません。フィルターを変更するか、パックを開封してください。
                    </Alert>
                ) : (
                    <>
                        {/* Grid container はそのまま */}
                        <Grid container spacing={2} justifyContent="center">
                            {cardsOnPage.map((card) => (
                                <Grid 
                                    size={{ xs: 6, sm: 4, md: 2 }} 
                                    key={card.cardId} 
                                    sx={{ display: 'flex', justifyContent: 'center' }}
                                >
                                    <OwnedCardItem card={card} isDTCGEnabled={isDTCGEnabled} />
                                </Grid>
                            ))}
                        </Grid>


                        {/* Pagination */}
                        {totalPages > 1 && (
                            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                                <Pagination 
                                    count={totalPages}
                                    page={currentPage}
                                    onChange={(_e, page) => setCurrentPage(page)}
                                    color="primary"
                                    showFirstButton 
                                    showLastButton 
                                />
                            </Box>
                        )}
                    </>
                )}
            </Box>
        </Box>
    );
};

export default CardPoolManager;