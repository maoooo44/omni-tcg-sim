// src/services/pack-logic/CardDataService.ts

import type { Card } from '../../models/card';

// const CARD_DATA_SOURCE_URL = '/data/tcg-cards.json';
let cardCache: Map<string, Card> | null = null;

export const cardDataService = {

    async loadAllCards(): Promise<boolean> {
        if (cardCache) return true;

        console.log('カードデータをロード中...');
        try {
            // 🛠️ フェーズ3用のダミーデータ
            const dummyCardArray: Card[] = [
                { cardId: 'tcg-0001', packId: 'tcg', name: 'ダミーA', rarity: 'Common', imageUrl: '', userCustom: {},},
                { cardId: 'tcg-0002', packId: 'tcg', name: 'ダミーB', rarity: 'Rare', imageUrl: '', userCustom: {}, },
                { cardId: 'tcg-0003', packId: 'tcg', name: 'ダミーC', rarity: 'SuperRare', imageUrl: '', userCustom: {}, },
                { cardId: 'tcg-0004', packId: 'tcg', name: 'ダミーD', rarity: 'SecretRare', imageUrl: '', userCustom: {}, },
                // 💡 DeckEditorで選択できるようにカード数を増やす (既存のパックID)
                { cardId: 'tcg-0005', packId: 'tcg', name: 'ダミーA2', rarity: 'Common', imageUrl: '', userCustom: {},},
                { cardId: 'tcg-0006', packId: 'tcg', name: 'ダミーB2', rarity: 'UnCommon', imageUrl: '', userCustom: {}, },
                { cardId: 'tcg-0007', packId: 'tcg', name: 'ダミーC2', rarity: 'Rare', imageUrl: '', userCustom: {}, },
                // ✅ 修正1: 異なるパックIDのカードを追加し、シミュレーションロジックのテスト性を向上
                { cardId: 'promo-0001', packId: 'promo', name: 'プロモカードX', rarity: 'SecretRare', imageUrl: '', userCustom: {}, },
                { cardId: 'promo-0002', packId: 'promo', name: 'プロモカードY', rarity: 'Common', imageUrl: '', userCustom: {}, },
            ];

            const cardMap = new Map(dummyCardArray.map(card => [card.cardId, card]));
            cardCache = cardMap;
            
            console.log(`カードデータ ${cardMap.size} 件をロードし、キャッシュしました。`);
            return true;

        } catch (error) {
            console.error('カードデータの初期ロードに失敗しました。', error);
            return false;
        }
    },

    getCardById(cardId: string): Card | undefined {
        return cardCache ? cardCache.get(cardId) : undefined;
    },
    
    getCardName(cardId: string): string {
        // ✅ 修正2: キャッシュが存在しない場合のチェックを追加
        if (!cardCache) {
            return '不明なカード (データ未ロード)';
        }
        return this.getCardById(cardId)?.name ?? '不明なカード';
    },

    /**
     * 💡 新規追加: キャッシュされている全てのカードを配列として取得する。
     * @returns 全てのCardオブジェクトの配列
     */
    getAllCards(): Card[] {
        if (!cardCache) {
            console.warn('Card cache is not loaded when trying to get all cards.');
            return [];
        }
        // Mapの値を配列に変換して返す
        return Array.from(cardCache.values());
    },

    /**
     * 指定されたパックIDとレアリティ名に一致するカードの配列を取得する。
     * @param packId - 対象のパックID
     * @param rarity - 対象のレアリティ名
     * @returns 該当するCardオブジェクトの配列
     */
    getCardsByPackAndRarity(packId: string, rarity: string): Card[] {
        if (!cardCache) {
            // ✅ 修正3: 警告メッセージをより具体的に修正
            console.warn('Card cache is not loaded when trying to get cards by pack and rarity.');
            return [];
        }
        
        // キャッシュされた全カードからフィルタリング
        return Array.from(cardCache.values()).filter(
            card => card.packId === packId && card.rarity === rarity
        );
    },
};