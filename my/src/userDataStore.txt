// src/stores/userDataStore.ts (修正)

import { create } from 'zustand';
// 💡 新規作成したサービスをインポート
import { userSettingsService, type PersistedUserSettings } from '../services/user-logic/userSettingsService';

// 🚨 削除: 通貨管理はcurrencyStoreに完全に委譲するため、DEFAULT_COINSを削除
// const DEFAULT_COINS = 5000;

// 📌 修正1: UserDataの状態とアクションを統合した型定義
export interface UserDataState {
    // 🚨 削除: coinsを削除 (currencyStoreに移動)
    // coins: number;              
    isDTCGEnabled: boolean;     
    isGodMode: boolean;         
    cheatCount: number;         
    
    // --- アクション ---
    loadUserData: () => Promise<void>; 
    // 🚨 削除: setCoins, updateCoins を削除 (currencyStoreに移動)
    // setCoins: (amount: number) => void;
    // updateCoins: (delta: number) => void;
    setDTCGMode: (isEnabled: boolean) => Promise<void>; 
    setGodMode: (isGMode: boolean) => Promise<void>;   
    // 💡 importUserData から coins を削除
    importUserData: (data: Omit<{ coins: number, isDTCGEnabled: boolean, isGodMode: boolean, cheatCount: number }, 'coins'>) => void;
}

// ユーザーデータの初期値 (状態部分のみ)
const initialState = {
    // 🚨 削除: coinsを削除 (currencyStoreに移動)
    // coins: DEFAULT_COINS,
    isDTCGEnabled: true, 
    isGodMode: false,
    cheatCount: 0,
};

// DB保存のための永続化可能な状態を抽出するヘルパー関数
const getPersistableState = (state: UserDataState): PersistedUserSettings => ({
    isDTCGEnabled: state.isDTCGEnabled,
    isGodMode: state.isGodMode,
    cheatCount: state.cheatCount,
});


export const useUserDataStore = create<UserDataState>((set, get) => ({
    // 状態の初期値をスプレッド
    ...initialState,
    
    // 💡 loadUserDataの実装: DBから設定をロードし、ストアを初期化
    loadUserData: async () => {
        try {
            const settings = await userSettingsService.loadSettings();
            if (settings) {
                // DBからロードした設定で上書き (coinsはloadしない)
                set({ 
                    isDTCGEnabled: settings.isDTCGEnabled,
                    isGodMode: settings.isGodMode,
                    cheatCount: settings.cheatCount
                });
            }
            console.log("✅ User data initialized.");
        } catch (error) {
            console.error('Failed to load user data:', error);
        }
    },
    
    // 🚨 削除: setCoins (currencyStoreに移動)
    // setCoins: (amount) => {
    //     set({ coins: amount });
    // },
    
    // 🚨 削除: updateCoins (currencyStoreに移動)
    // updateCoins: (delta) => {
    //     set(state => {
    //         const newCoins = Math.max(0, state.coins + delta);
    //         return { coins: newCoins };
    //     });
    // },

    // 💡 setDTCGModeの実装: 状態更新後にDBに保存
    setDTCGMode: async (isEnabled) => {
        // 1. ストアを更新
        set({ isDTCGEnabled: isEnabled }); 
        
        // 2. DBに保存
        await userSettingsService.saveSettings(getPersistableState(get()));
        console.log(`DTCG Mode set to ${isEnabled}.`);
    },

    // 💡 setGodModeの実装: 状態更新とチートカウント更新後にDBに保存
    setGodMode: async (isGMode) => {
        const currentGodMode = get().isGodMode;
        
        if (isGMode && !currentGodMode) {
            const { isDTCGEnabled, cheatCount } = get();
            
            let newCheatCount = cheatCount;
            if (isDTCGEnabled) {
                // DTCGモードが有効な場合のみチートカウントを増やすロジック
                newCheatCount = cheatCount + 1;
            }
            
            // 1. ストアを更新
            set({ 
                isGodMode: isGMode, 
                cheatCount: newCheatCount 
            });
            console.log(`God Mode Activated. Cheat Count: ${newCheatCount}`);

        } else {
            // 1. ストアを更新 (God Modeを解除)
            set({ isGodMode: isGMode });
            console.log("God Mode Deactivated.");
        }
        
        // 2. DBに保存
        await userSettingsService.saveSettings(getPersistableState(get()));
    },
    
    // 💡 importUserDataの修正: coinsをデータから除外
    importUserData: async (data) => {
        set({ ...data });
        // 💡 ZIPインポートの場合、DBにも保存すべき
        await userSettingsService.saveSettings(getPersistableState(get()));
    },

}));