// src/services/pack-logic/simulationUtils.ts (修正後)

import type { Pack} from '../../models/pack';
import { selectWeightedItem, type WeightedItem } from '../../utils/randomUtils';
import { cardDataService } from './CardDataService';

/**
 * 1パックを開封し、封入設定に基づいてカードのリスト（シミュレーション結果）を生成する。
 * @param pack - 開封するパックデータ
 * @returns 抽選によって得られたカードIDと枚数のリスト、およびシミュレーション警告
 */
export const simulatePackOpening = (pack: Pack): { 
    results: { cardId: string, count: number }[], 
    simulationWarning: string | null 
} => { // 💡 戻り値の型定義を修正
    const drawnCardsMap = new Map(); //

    // 1. PackのRarityConfigを汎用的なWeightedItemの配列に変換
    const weightedRarities: WeightedItem[] = pack.rarityConfig.map(config => ({ // [1]
        key: config.rarityName, //
        probability: config.probability, //
    }));

    let failedDrawCount = 0; // 💡 追記: 失敗した抽選のカウント

    // 1パックの総枚数分、抽選を繰り返す
    for (let i = 0; i < pack.cardsPerPack; i++) { //
        // 2. 汎用ロジックを使ってレアリティを抽選
        const drawnRarity = selectWeightedItem(weightedRarities); //

        // 3. 抽選されたレアリティに基づき、そのパックに収録されているカードIDリストを取得
        const availableCards = cardDataService.getCardsByPackAndRarity( // [2]
            pack.packId,
            drawnRarity
        );

        const availableCardIds = availableCards.map(card => card.cardId); // [2]

        let cardId = ''; //

        if (availableCardIds.length > 0) { //
            // リストからランダムに1枚を選択
            const randomIndex = Math.floor(Math.random() * availableCardIds.length); //
            cardId = availableCardIds[randomIndex]; //
        } else {
            // 🚨 収録カードがない場合、警告を出してこの抽選をスキップ (フォールバック削除済)
            console.warn(`Pack ID: ${pack.packId}, Rarity: ${drawnRarity} に収録カードがありません。この抽選は無効化されました。`);
            failedDrawCount++; // 💡 失敗カウントをインクリメント
            continue; // 該当カードが見つからなかった場合、その抽選を破棄し、次のループへ
        }

        // 4. Mapにカウントを追加
        const currentCount = drawnCardsMap.get(cardId) || 0; // [3]
        drawnCardsMap.set(cardId, currentCount + 1); // [3]
    }

    // Mapを { cardId, count }[] の形式に変換
    const results = Array.from(drawnCardsMap.entries()).map(([cardId, count]) => ({ // [3]
        cardId, //
        count //
    }));

    let simulationWarning = null;
    if (failedDrawCount > 0) {
        // 💡 警告メッセージを生成
        simulationWarning = `警告: ${failedDrawCount}枚の抽選が、パックに収録されているカードデータが見つからなかったため無効化されました。パックにカードを登録するか、収録カードの packId/rarity を確認してください。`;
    }

    // 💡 新しい戻り値の構造
    return { results, simulationWarning };
};