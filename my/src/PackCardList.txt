// src/components/PackCardList.tsx

import React from 'react';
import { Button, Grid, Box, Typography, Card, CardContent, CardActionArea, CardMedia } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import { useShallow } from 'zustand/react/shallow';
import { useCardStore } from '../stores/cardStore';
import { generateUUID } from '../utils/uuidUtils';
import type { Card as CardType } from '../models/card';

// 仮定: CardEditModalを開くためのPropsを定義
interface PackCardListProps {
    packId: string;
    isEditable: boolean;
    // 💡 編集モーダルを開くためのハンドラ（実装はPackEditPage側）
    onOpenEditModal: (card: CardType | null) => void;
}

const CARD_GRID_WIDTH = 150; // カード一枚の幅を定義

const PackCardList: React.FC<PackCardListProps> = ({ packId, isEditable, onOpenEditModal }) => {
    // packIdに紐づくカードのみを取得
    const cardsInPack = useCardStore(useShallow(state => 
        state.cards.filter(card => card.packId === packId)
    ));
    
    // 新規カードを追加する処理
    const handleAddNewCard = () => {
        if (!isEditable) return;

        // 空のCardオブジェクトを作成し、編集モーダルを開く
        const newCard: CardType = {
            cardId: generateUUID(),
            packId: packId,
            name: '新しいカード',
            imageUrl: '',
            rarity: '',
            userCustom: {},
        };

        // ストアに一旦追加はせず、モーダルで編集・保存させる（今回は即時編集モードへ）
        onOpenEditModal(newCard);
    };
    
    // 既存カードを選択した処理
    const handleSelectCard = (card: CardType) => {
        if (isEditable) {
            // 編集モード時: 編集モーダルを開く
            onOpenEditModal(card);
        } else {
            // 非編集モード時: 詳細表示モーダルを開く (TODO)
            alert(`カード詳細表示 (ID: ${card.cardId}) - TODO`);
        }
    };

    return (
        <Box sx={{ flexGrow: 1 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h5">収録カード ({cardsInPack.length}枚)</Typography>
                {isEditable && (
                    <Button 
                        variant="contained" 
                        startIcon={<AddIcon />} 
                        onClick={handleAddNewCard}
                    >
                        新規カードを追加
                    </Button>
                )}
            </Box>

            <Box 
                sx={{ 
                    // ユーザーカスタムUIの縦長を防ぐため、カードリストをスクロール可能にする
                    maxHeight: '70vh', 
                    overflowY: 'auto', 
                    p: 1, 
                    border: '1px solid', 
                    borderColor: 'grey.300',
                    borderRadius: 1
                }}
            >
                {/* 収録カードのグリッド表示 */}
                <Grid container spacing={2}>
                    {cardsInPack.map(card => (
                        <Grid key={card.cardId}>
                            <Card 
                                sx={{ 
                                    width: CARD_GRID_WIDTH, 
                                    cursor: 'pointer',
                                    boxShadow: 1, 
                                }}
                                onClick={() => handleSelectCard(card)}
                            >
                                <CardActionArea>
                                    <CardMedia
                                        component="img"
                                        // imageUrlが空の場合のプレースホルダ
                                        image={card.imageUrl || 'https://via.placeholder.com/150x210?text=Card+Image'} 
                                        alt={card.name}
                                        sx={{ height: 210, objectFit: 'cover' }}
                                    />
                                    <CardContent sx={{ p: 1, '&:last-child': { pb: 1 } }}>
                                        <Typography variant="subtitle2" noWrap>{card.name}</Typography>
                                        <Typography variant="caption" color="text.secondary">{card.rarity}</Typography>
                                    </CardContent>
                                </CardActionArea>
                            </Card>
                        </Grid>
                    ))}
                    
                    {cardsInPack.length === 0 && (
                        <Grid>
                            <Box sx={{ p: 2, m: 1, border: '1px dashed grey', borderRadius: 1, width: CARD_GRID_WIDTH }}>
                                <Typography variant="body2" color="text.secondary">
                                    カードはまだ登録されていません。
                                </Typography>
                            </Box>
                        </Grid>
                    )}

                </Grid>
            </Box>
        </Box>
    );
};

export default PackCardList;