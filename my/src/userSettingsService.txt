// src/services/user-logic/userSettingsService.ts (新規作成)

import { db } from '../database/db';
// DBSettingの型はdb.tsかdb-types.tsで定義されていることを前提とします
import type { DBSetting } from '../../models/db-types'; 

const SETTINGS_KEY = 'userSettings'; // 全設定を保存するための単一のキー

/**
 * DBに保存するユーザー設定の具体的な型
 * (coinsはcurrencyStoreが扱うため、ここでは含めません)
 */
export interface PersistedUserSettings {
    isDTCGEnabled: boolean;
    isGodMode: boolean;
    cheatCount: number;
}

const DEFAULT_SETTINGS: PersistedUserSettings = {
    isDTCGEnabled: true,
    isGodMode: false,
    cheatCount: 0,
};

/**
 * IndexedDB (Dexie) の 'userSettings' テーブルに対するユーザー設定の操作を扱うサービス。
 * すべての設定は単一のキー ('userSettings') でJSONとして保存されます。
 */
export const userSettingsService = {

    /**
     * DBからユーザー設定をロードする。
     * @returns PersistedUserSettings | undefined (データが存在しない場合)
     */
    async loadSettings(): Promise<PersistedUserSettings | undefined> {
        try {
            const entry = await db.userSettings.get(SETTINGS_KEY);
            
            if (entry) {
                // DBの値を読み込み、未定義のプロパティはデフォルト値で補完
                const loadedSettings = entry.value as PersistedUserSettings;
                return { ...DEFAULT_SETTINGS, ...loadedSettings };
            }
            return undefined; 
        } catch (error) {
            console.error("Failed to load user settings from DB:", error);
            return undefined;
        }
    },

    /**
     * 現在のユーザー設定全体をDBに保存する（更新または新規作成）。
     * @param settings - 保存する設定オブジェクト
     */
    async saveSettings(settings: PersistedUserSettings): Promise<void> {
        try {
            const settingEntry: DBSetting = {
                key: SETTINGS_KEY,
                value: settings
            };
            // put で更新または新規追加
            await db.userSettings.put(settingEntry); 
        } catch (error) {
            console.error("Failed to save user settings to DB:", error);
            throw new Error("ユーザー設定のDB保存に失敗しました。");
        }
    },
};