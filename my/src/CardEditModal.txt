// src/components/CardEditModal.tsx (最終決定版)

import React, { useState, useEffect, useCallback } from 'react';
import { 
    Dialog, DialogTitle, DialogContent, DialogActions, 
    Button, TextField, Box, Typography, Grid, Select, MenuItem, 
    InputLabel, FormControl, IconButton, Paper, Divider,
    Alert,
    // ❌ SelectProps をここでインポートすると TS1484 が発生するため削除
} from '@mui/material';
// ✅ 修正1: SelectChangeEvent と SelectProps（のちに削除） を type-only でインポート (TS1484, TS6133 解消)
import type { SelectChangeEvent} from '@mui/material'; 

import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import { useCardStore } from '../stores/cardStore';
import { usePackStore } from '../stores/packStore';
import type { Card } from '../models/card'; 

// CardRarity の型定義
type CardRarity = string; 

// モーダルが受け取るプロパティ
interface CardEditModalProps {
    open: boolean;
    onClose: () => void;
    card: Card | null; 
}

const DEFAULT_IMAGE_URL = 'https://via.placeholder.com/300x420?text=No+Card+Image';

const CardEditModal: React.FC<CardEditModalProps> = ({ open, onClose, card }) => {
    const [localCard, setLocalCard] = useState<Card | null>(card);
    const { createCard, updateCard, deleteCard } = useCardStore();
    const packs = usePackStore(state => state.packs);
    
    const currentPack = packs.find(p => p.packId === localCard?.packId);
    const rarityOptions: string[] = currentPack?.rarityConfig.map(r => r.rarityName) || ['Common', 'Rare', 'Super Rare'];
    
    useEffect(() => {
        setLocalCard(card);
    }, [card]);

    const customDataArray = React.useMemo(() => {
        return localCard ? Object.entries(localCard.userCustom).map(([key, value]) => ({ key, value })) : [];
    }, [localCard]);

    const isNew = localCard ? !useCardStore.getState().cards.some(c => c.cardId === localCard.cardId) : true;
    
    // フォーム入力ハンドラ（基本情報）
    const handleBasicChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>) => {
        const { name, value } = e.target;
        if (localCard) {
            setLocalCard({ 
                ...localCard, 
                [name as string]: value 
            } as Card);
        }
    }, [localCard]);
    
    // フォーム入力ハンドラ（レアリティ選択）
    // ✅ 修正2 & 3: TS7006, TS6133 修正: 引数に明示的な型を適用し、未使用の引数には _ プレフィックスを付ける
    // SelectProps<string>['onChange'] は型としてのみ参照
    const handleRarityChange = useCallback(
        (e: SelectChangeEvent<string>, _child: React.ReactNode) => {
        if (localCard) {
            setLocalCard({ 
                ...localCard, 
                rarity: e.target.value as CardRarity
            });
        }
    }, [localCard]);

    // カスタムメタデータ変更ハンドラ
    const handleCustomChange = useCallback((index: number, field: 'key' | 'value', newValue: string) => {
        if (!localCard) return;

        const currentCustomArray = Object.entries(localCard.userCustom).map(([key, value]) => ({ key, value }));
        
        const newCustomData = [...currentCustomArray];
        newCustomData[index] = { ...newCustomData[index], [field]: newValue };

        const newUserCustom: Record<string, string> = {};
        newCustomData.forEach(item => {
            if (item.key.trim() !== '' || item.key === Object.keys(localCard.userCustom)[index]) { 
                newUserCustom[item.key] = item.value;
            }
        });

        setLocalCard({
            ...localCard,
            userCustom: newUserCustom,
        });

    }, [localCard]);

    // カスタムメタデータ項目追加
    const handleAddCustomField = () => {
        if (!localCard) return;
        
        const tempKey = `__NEW_ITEM__${Date.now()}`;
        
        setLocalCard({
            ...localCard,
            userCustom: { 
                ...localCard.userCustom, 
                [tempKey]: '',
            }
        });
    };
    
    // カスタムメタデータ項目削除
    const handleRemoveCustomField = (keyToRemove: string) => {
        if (!localCard) return;
        
        const { [keyToRemove]: _, ...rest } = localCard.userCustom;
        setLocalCard({
            ...localCard,
            userCustom: rest,
        });
    };

    // 保存処理
    const handleSave = () => {
        if (!localCard || !localCard.name || !localCard.rarity) {
            alert("カード名とレアリティは必須項目です。");
            return;
        }

        const finalCard: Card = {
            ...localCard,
            userCustom: Object.fromEntries(
                Object.entries(localCard.userCustom).filter(([key, _]) => key.trim() !== '')
            ),
        };

        if (isNew) {
            createCard(finalCard);
        } else {
            updateCard(finalCard);
        }

        onClose();
    };
    
    // 削除処理
    const handleDelete = () => {
        if (!localCard) return;
        if (window.confirm(`カード "${localCard.name}" を削除しますか？`)) {
            deleteCard(localCard.cardId);
            onClose();
        }
    };
    
    if (!localCard) return null;

    return (
        <Dialog 
            open={open} 
            onClose={onClose} 
            maxWidth="md" 
            fullWidth
            aria-labelledby="card-edit-dialog-title"
        >
            <DialogTitle id="card-edit-dialog-title">
                {isNew ? '新規カードの作成' : `カード編集: ${localCard.name}`}
                <Typography variant="caption" color="textSecondary" sx={{ ml: 2 }}>
                    (ID: {localCard.cardId})
                </Typography>
            </DialogTitle>
            <DialogContent dividers>
                <Grid container spacing={3}>
                    
                    {/* 左側: カード画像プレビュー (4/12) */}
                    <Grid size={{ xs: 12, md: 4 }}>
                        <Paper elevation={3} sx={{ p: 2 }}>
                            <Typography variant="h6" gutterBottom>カードプレビュー</Typography>
                            <Box 
                                sx={{ 
                                    width: '100%', 
                                    aspectRatio: '300 / 420', 
                                    backgroundColor: '#eee', 
                                    borderRadius: 1, 
                                    overflow: 'hidden'
                                }}
                            >
                                <img 
                                    src={localCard.imageUrl || DEFAULT_IMAGE_URL} 
                                    alt={localCard.name} 
                                    style={{ 
                                        width: '100%', 
                                        height: '100%', 
                                        objectFit: 'cover' 
                                    }}
                                />
                            </Box>
                        </Paper>
                    </Grid>
                    
                    {/* 右側: フォーム入力エリア (8/12) */}
                    <Grid size={{ xs: 12, md: 8 }}>
                        
                        {/* 基本情報 */}
                        <Typography variant="h6" gutterBottom>基本情報</Typography>
                        <TextField 
                            label="カード名" 
                            name="name"
                            fullWidth 
                            margin="normal" 
                            value={localCard.name} 
                            onChange={handleBasicChange} 
                            required 
                        />
                        <TextField 
                            label="画像URL (imageUrl)" 
                            name="imageUrl"
                            fullWidth 
                            margin="normal" 
                            value={localCard.imageUrl} 
                            onChange={handleBasicChange} 
                        />
                        
                        <FormControl fullWidth margin="normal" required>
                            <InputLabel id="card-rarity-label">レアリティ</InputLabel>
                            <Select 
                                labelId="card-rarity-label" 
                                value={localCard.rarity} 
                                label="レアリティ" 
                                onChange={handleRarityChange} 
                                name="rarity"
                            >
                                {rarityOptions.map(rarity => (
                                    <MenuItem key={rarity} value={rarity}>{rarity}</MenuItem>
                                ))}
                            </Select>
                            {!currentPack && (
                                <Alert severity="warning" sx={{mt: 1, p: 0.5}}>パック情報がないため、初期レアリティ設定を使用しています。</Alert>
                            )}
                        </FormControl>

                        <Divider sx={{ my: 3 }} />

                        {/* ユーザーカスタムメタデータ */}
                        <Typography variant="h6" gutterBottom>
                            ユーザーカスタムメタデータ 
                            <Button 
                                variant="outlined" 
                                size="small" 
                                startIcon={<AddIcon />} 
                                onClick={handleAddCustomField} 
                                sx={{ ml: 2 }}
                            >
                                項目追加
                            </Button>
                        </Typography>

                        {/* 縦長にならないように、このエリアをスクロール可能にする */}
                        <Box sx={{ maxHeight: 300, overflowY: 'auto', pr: 1 }}>
                            <Grid container spacing={2}>
                                {customDataArray.map((item, index) => (
                                    <React.Fragment key={item.key || `new-item-${index}`}> 
                                        {/* キー入力 (左側) */}
                                        <Grid size={{ xs: 5 }}>
                                            <TextField
                                                label="カスタム項目名 (Key)"
                                                fullWidth
                                                size="small"
                                                margin="none"
                                                value={item.key}
                                                onChange={(e) => handleCustomChange(index, 'key', e.target.value)}
                                            />
                                        </Grid>
                                        {/* 値入力 (中央) */}
                                        <Grid size={{ xs: 6 }}>
                                            <TextField
                                                label="値 (Value)"
                                                fullWidth
                                                size="small"
                                                margin="none"
                                                value={item.value}
                                                onChange={(e) => handleCustomChange(index, 'value', e.target.value)}
                                            />
                                        </Grid>
                                        {/* 削除ボタン (右側) */}
                                        <Grid size={{ xs: 1 }} sx={{ display: 'flex', alignItems: 'center' }}>
                                            <IconButton 
                                                onClick={() => handleRemoveCustomField(item.key)} 
                                                color="error"
                                                size="small"
                                                disabled={item.key.trim() === ''} 
                                            >
                                                <DeleteIcon fontSize="small" />
                                            </IconButton>
                                        </Grid>
                                    </React.Fragment>
                                ))}
                            </Grid>
                        </Box>
                        
                    </Grid>
                </Grid>
            </DialogContent>
            <DialogActions>
                {!isNew && (
                    <Button onClick={handleDelete} color="error" sx={{ mr: 'auto' }}>
                        カードを削除
                    </Button>
                )}
                <Button onClick={onClose} variant="outlined">
                    キャンセル
                </Button>
                <Button onClick={handleSave} variant="contained" color="primary">
                    {isNew ? 'カードを作成' : '変更を保存'}
                </Button>
            </DialogActions>
        </Dialog>
    );
};

export default CardEditModal;