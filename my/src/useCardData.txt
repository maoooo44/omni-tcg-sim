// src/hooks/useCardData.ts

import { useEffect, useState } from 'react';
// 💡 パスを再修正: 'pack-logic' を最終的な配置として確定
import { cardDataService } from '../services/pack-logic/CardDataService'; 
import type { Card } from '../models/card';
// 🚨 削除された行: import { useCardData } from './useCardData'; // 循環参照の根本原因

/**
 * アプリケーション全体のカードデータを扱うためのフック
 */
export const useCardData = () => {
    // データがロードされたかどうかを追跡
    const [isLoaded, setIsLoaded] = useState(false);
    
    useEffect(() => {
        // コンポーネントマウント時にカードデータをロード
        cardDataService.loadAllCards()
            .then(success => {
                if (success) {
                    setIsLoaded(true);
                } else {
                    console.error('カードデータの初期ロードに失敗しました。');
                }
            });
    }, []);

    /**
     * IDからカード情報を取得するヘルパー関数
     * @param cardId 
     * @returns 
     */
    const getCardInfo = (cardId: string): Card | undefined => {
        return cardDataService.getCardById(cardId);
    };

    /**
     * IDからカード名を取得する関数（UIでの利用を想定）
     * @param cardId 
     * @returns 
     */
    const getCardName = (cardId: string): string => {
        // 💡 修正: getCardInfoの結果を利用し、不明な場合はフォールバック
        return getCardInfo(cardId)?.name ?? '不明なカード';
    };

    /**
     * 新規追加: 全てのカードデータを取得するヘルパー関数
     * @returns 全てのCardオブジェクトの配列
     */
    const getAllCards = (): Card[] => {
        // cardDataServiceに追加されたメソッドを呼び出す
        return cardDataService.getAllCards();
    };


    return {
        isCardDataLoaded: isLoaded,
        getCardInfo,
        getCardName,
        getAllCards, // 💡 修正: getAllCardsをフックの戻り値として公開
    };
};