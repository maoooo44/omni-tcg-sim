// src/stores/packStore.ts
import { create } from 'zustand';
import type { Pack, RarityConfig, } from '../models/pack'; //PackTypeを削除
import { v4 as uuidv4 } from 'uuid'; 
import { packService } from '../services/pack-logic/packService'; // 💡 packServiceをインポート

const generatePackId = () => uuidv4();

// 💡 最小限のデフォルト値
const DEFAULT_RARITY_CONFIG: RarityConfig[] = [{
    rarityName: 'Common',
    probability: 1.0, // 100%
}];

// Pack の必須フィールドのうち、自動で生成/設定されるものを除外した型
type NewPackData = Omit<Pack, 'packId' | 'totalCards' | 'isOpened'>;

export interface PackState {
    packs: Pack[];

    // --- アクション ---
    loadPacks: () => Promise<void>; 
    /** 新しいパックを作成 (packId, totalCards, isOpened は自動設定) */
    createPack: (newPackData: NewPackData) => Promise<void>; // 💡 Promise<void>に変更
    updatePack: (updatedPack: Pack) => Promise<void>; // 💡 Promise<void>に変更
    deletePack: (packId: string) => Promise<void>; // 💡 Promise<void>に変更
}

const initialState = {
    packs: [],
};

export const usePackStore = create<PackState>((set, _get) => ({
    ...initialState,
    
    // 💡 実装: DBからパックデータをロードし、ストアにセットする
    loadPacks: async () => {
        try {
            // DBから全パックを取得
            const packs = await packService.getAllPacks();
            set({ packs });
            console.log(`✅ [PackStore] Loaded ${packs.length} packs from DB.`);
        } catch (error) {
            console.error('Failed to load packs:', error);
            // 失敗時はpacksを空のままにする
        }
    },
    
    createPack: async (newPackData) => { // 💡 asyncに変更
        const newPack: Pack = {
            ...newPackData,
            packId: generatePackId(),
            totalCards: 0, 
            isOpened: false, 
            rarityConfig: newPackData.rarityConfig.length > 0 ? newPackData.rarityConfig : DEFAULT_RARITY_CONFIG, 
        };
        
        // 🛠️ DBへの書き込み
        // packServiceのcreatePackはDBで生成されたIDを返す
        const newId = await packService.createPack(newPack);
        
        set(state => ({
            // DBで確定したIDでストアに反映
            packs: [...state.packs, { ...newPack, packId: newId }],
        }));
        console.log(`パックを作成: ${newPack.name} (ID: ${newId})`);
    },
    
    updatePack: async (updatedPack) => { // 💡 asyncに変更
        // 🛠️ DBへの書き込み
        await packService.updatePack(updatedPack.packId, updatedPack);
        
        set(state => ({
            packs: state.packs.map(p => 
                p.packId === updatedPack.packId ? updatedPack : p
            ),
        }));
        console.log(`パックを更新: ${updatedPack.name}`);
    },
    
    deletePack: async (packId) => { // 💡 asyncに変更
        // 🛠️ DBから削除
        await packService.deletePack(packId);
        
        set(state => ({
            packs: state.packs.filter(p => p.packId !== packId),
        }));
        console.log(`パックを削除: ${packId}`);
    },
}));