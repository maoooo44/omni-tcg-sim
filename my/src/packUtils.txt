// src/services/pack-logic/packUtils.ts
import { generateUUID } from '../../utils/uuidUtils';  // 💡 uuid/v4 の代わりに、汎用ユーティリティから関数をインポート
import type { Pack } from "../../models/pack"; // 💡 type を追加してTS1484を修正

/**
 * ユニークなパックIDを生成する。
 * @returns {string} 生成されたユニークなパックID (UUID)
 */
export const generatePackId = (): string => {
    return generateUUID();
};


/**
 * パックデータに含まれる全てのユニークカード総数（Pack.totalCards）を計算する。（現状スタブ）
 * 💡 注意: この値は、Packに紐づけられた全カード（PackCardPool）の数を集計する必要がありますが、
 * 現状Packインターフェースにはそのデータが含まれていないため、ロジックは実装せず0を返します。
 * @param {Pack} _pack - 計算対象のパックオブジェクト (💡 _ を付けて未使用であることを示す)
 * @returns {number} 総収録カード数
 */
export const calculateTotalCards = (_pack: Pack): number => {
    // フェーズ1後半またはフェーズ2で、DBから紐づくカードをカウントするロジックを実装します。
    return 0;
};

// パックの初期値を生成する関数（新規作成時用）
export const createDefaultPack = (): Pack => {
    const defaultPack: Pack = {
        packId: generatePackId(),
        name: '新規パック',
        series: '未定',
        packType: 'Booster', // 💡 PackType を追加
        cardsPerPack: 12, // 💡 1パックあたりの封入枚数 (デフォルト値)
        rarityConfig: [ // 💡 rarityConfig を追加
            { rarityName: 'Common', probability: 0.75 },
            { rarityName: 'Uncommon', probability: 0.20 },
            { rarityName: 'Rare', probability: 0.05 },
        ],
        totalCards: 0, // 総収録カード数は初期値0
        imageUrl: '',
        cardBackUrl: '',
        price: 300, 
        description: 'ブースターパックの説明をここに入力してください。', // 💡 description を追加
        releaseDate: new Date().toISOString().split('T')[0], 
        userCustom: {},
        isOpened: false, // 💡 追加
    };
    
    return defaultPack;
};