// src/services/pack-logic/packService.ts
import { db } from "../database/db";
import type { Pack } from "../../models/pack";
import { createDefaultPack } from "./packUtils";

/**
 * IndexedDB (Dexie) の 'packs' テーブルに対する CRUD 操作を扱うサービス
 */
export const packService = {

    /**
     * パックを新規作成し、IndexedDBに保存する。
     * @param packData - 保存する Pack データ
     * @returns 保存されたパックのID
     */
    async createPack(packData: Pack = createDefaultPack()): Promise<string> {
        try {
            // isOpened: false を強制 (新規作成のため)
            const id = await db.packs.add({ ...packData, isOpened: false }); 
            console.log(`Pack created with ID: ${id}`);
            return id as string;
        } catch (error) {
            console.error("Failed to create pack:", error);
            throw new Error("パックの作成に失敗しました。");
        }
    },

    /**
     * IDを指定して特定のパックを取得する。
     * @param packId - 取得したいパックのID
     * @returns Pack オブジェクト、または見つからなかった場合は null
     */
    async getPackById(packId: string): Promise<Pack | null> {
        try {
            const pack = await db.packs.get(packId);
            return pack ?? null;
        } catch (error) {
            console.error(`Failed to get pack ${packId}:`, error);
            return null;
        }
    },
    
    /**
     * IndexedDBから保存されている全てのパックデータを取得する。（💡 新規追加）
     * @returns Pack[] オブジェクトの配列
     */
    async getAllPacks(): Promise<Pack[]> {
        try {
            const packs = await db.packs.toArray();
            return packs;
        } catch (error) {
            console.error("Failed to load all packs from DB:", error);
            // 失敗時は空の配列を返す
            return [];
        }
    },


    /**
     * パックを更新する。
     * @param packId - 更新対象のパックID
     * @param updatedData - 更新データ
     */
    async updatePack(packId: string, updatedData: Partial<Pack>): Promise<void> {
        try {
            await db.packs.update(packId, updatedData);
        } catch (error) {
            console.error(`Failed to update pack ${packId}:`, error);
            throw new Error("パックの更新に失敗しました。");
        }
    },

    /**
     * パックを削除する。
     * @param packId - 削除対象のパックID
     */
    async deletePack(packId: string): Promise<void> {
        try {
            await db.packs.delete(packId);
        } catch (error) {
            console.error(`Failed to delete pack ${packId}:`, error);
            throw new Error("パックの削除に失敗しました。");
        }
    },

    /**
     * 複数のパックデータを一括インポートする。
     * 既存のIDと重複するパックはスキップされる。
     * @param packsToImport - インポートするパックデータの配列
     * @returns インポートされたパックの数とスキップされたIDのリスト
     */
    async importPacks(packsToImport: Pack[]): Promise<{ importedCount: number, skippedIds: string[] }> {
        const existingPacks = await db.packs.toArray();
        const existingIds = new Set(existingPacks.map(p => p.packId));
        
        const newPacks: Pack[] = [];
        const skippedIds: string[] = [];

        // 1. 重複チェックと新規パックのフィルタリング
        packsToImport.forEach(pack => {
            // パックの必須フィールドチェック（IDと価格）
            if (!pack.packId || pack.price === undefined) {
                 console.warn("Skipping invalid pack data: Missing packId or price.");
                 return;
            }

            if (existingIds.has(pack.packId)) {
                skippedIds.push(pack.packId);
            } else {
                newPacks.push({
                    ...pack,
                    // インポートされたデータが isOpened を持たない場合を考慮し、デフォルトは false
                    isOpened: pack.isOpened ?? false, 
                });
            }
        });

        if (newPacks.length === 0) {
            return { importedCount: 0, skippedIds };
        }

        try {
            // 2. 新規パックを一括追加 (bulkAdd)
            await db.packs.bulkAdd(newPacks);
            console.log(`${newPacks.length} packs imported successfully.`);
            
            return { 
                importedCount: newPacks.length, 
                skippedIds 
            };
        } catch (error) {
            console.error("Failed to import packs:", error);
            throw new Error("パックのインポートに失敗しました。");
        }
    },
};