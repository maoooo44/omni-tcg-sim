// src/stores/cardStore.ts

import { create } from 'zustand';
// 依存ファイルを仮定: Cardの型はpackStoreと同じ階層からインポート
import type { Card } from '../models/card'; 
// import { useShallow } from 'zustand/react/shallow';

interface CardStore {
    cards: Card[];
    
    // CRUD操作
    createCard: (card: Card) => void;
    updateCard: (card: Card) => void;
    deleteCard: (cardId: string) => void;
    
    // 便利メソッド
    // shallowで利用しやすいように、ストアの外でuseShallowと一緒に呼び出すことを推奨
    getCardsByPackId: (packId: string) => Card[];
}

// 💡 注意: 実際のプロジェクトでは、初期値にローカルストレージからの復元ロジックを追加する必要があります。

export const useCardStore = create<CardStore>((set, get) => ({
    cards: [], // 初期状態は空
    
    createCard: (newCard) => set((state) => ({ 
        cards: [...state.cards, newCard] 
    })),
    
    updateCard: (updatedCard) => set((state) => ({
        cards: state.cards.map(card => 
            card.cardId === updatedCard.cardId ? updatedCard : card
        )
    })),
    
    deleteCard: (cardId) => set((state) => ({
        cards: state.cards.filter(card => card.cardId !== cardId)
    })),
    
    // getCardsByPackIdは、パフォーマンス向上のため、useShallowを利用してコンポーネント側でフックとして利用することを推奨します
    getCardsByPackId: (packId) => {
        return get().cards.filter(card => card.packId === packId);
    },
}));

// コンポーネントでの利用例:
// const cardsInPack = useCardStore(useShallow(state => state.cards.filter(card => card.packId === packId)));