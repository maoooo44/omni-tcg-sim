/**
* src/services/archive/archiveService.ts
*
* „Ç¢„Éº„Ç´„Ç§„Éñ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Ôºà'trash' „Åä„Çà„Å≥ 'history'Ôºâ„Å´ÂØæ„Åô„Çã„Éá„Éº„Çø„Éô„Éº„ÇπÊìç‰Ωú„ÇíÁÆ°ÁêÜ„Åô„Çã„Çµ„Éº„Éì„ÇπÂ±§„É¢„Ç∏„É•„Éº„É´„ÄÇ
* * Ë≤¨Âãô:
* 1. DB„Ç≥„Ç¢Â±§ÔºàdbCoreÔºâ„Çí‰ªã„Åó„Åü 'trash' / 'history' „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Å∏„ÅÆ CRUD Êìç‰ΩúÔºà„Éê„É´„ÇØÊìç‰Ωú„ÇíÂü∫Êú¨„Å®„Åô„ÇãÔºâ„ÄÇ
* 2. Â±•Ê≠¥„Ç¢„Ç§„ÉÜ„É†„ÅÆÁîüÊàêÔºàcreateDBArchiveRecordÔºâ„ÄÇ
* 3. „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Å®„Éá„Éï„Ç©„É´„ÉàÂÄ§„Å´Âü∫„Å•„ÅçGCË®≠ÂÆöÂÄ§„ÇíËß£Ê±∫„Åó„ÄÅ„Ç¢„Ç§„ÉÜ„É†„Çø„Ç§„Éó„Å´Âøú„Åò„Åü„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ÔºàGCÔºâ„ÅÆÂÆüË°å„Çí„Éà„É™„Ç¨„Éº„Åô„Çã„ÄÇ
* 4. ‰∏ª„Ç≠„Éº„Å®„Åó„Å¶ archiveId „ÅÆ„Åø„Çí‰ΩøÁî®„Åô„ÇãÁµ±‰∏ÄÁöÑ„Å™„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆÊèê‰æõ„ÄÇ
*/
import type { DBArchive, ArchiveItemType } from "../../models/db-types";
import { 
    fetchAllItemsFromCollection, 
    bulkFetchItemsByIdsFromCollection, 
    bulkPutItemsToCollection, 
    bulkDeleteItemsFromCollection, 
    runGarbageCollectionForCollection, 
    type DbCollectionName 
} from '../database/dbCore';
import { 
    userDataService, 
    type PersistedUserSettings, 
} from '../user-data/userDataService'; 
import { generateId } from '../../utils/dataUtils'; 
import { resolveNumberWithFallback } from '../../utils/valueResolver';
import { ARCHIVE_GC_DEFAULTS } from '../../config/defaults'; 

// ----------------------------------------
// „Éó„É©„Ç§„Éô„Éº„Éà„Éò„É´„Éë„ÉºÈñ¢Êï∞
// ----------------------------------------

/**
 * DBArchive„É¨„Ç≥„Éº„ÉâÊú¨‰Ωì„ÇíÁîüÊàê„Åô„ÇãÊ±éÁî®„Éò„É´„Éë„ÉºÈñ¢Êï∞ (ÂûãÂÆâÂÖ®ÊÄß„ÇíÂêë‰∏ä)
 * isFavorite„ÅØÂàùÊúüÁä∂ÊÖã„Å®„Åó„Å¶false„ÇíË®≠ÂÆö„Åô„Çã„ÄÇ
 */
const createDBArchiveRecord = (
    itemId: string,
    itemType: ArchiveItemType, 
    itemData: any, // DBArchive.itemData „ÅÆÂûã„ÅØÂëº„Å≥Âá∫„ÅóÂÅ¥„ÅßÊãÖ‰øù
): DBArchive => {
    
    const archivedAt = new Date().toISOString();
    const isFavorite = false; 

    const commonFields = {
        itemId: itemId,
        itemType: itemType, 
        itemData: itemData,
        archivedAt: archivedAt,
        isFavorite: isFavorite,
    };

    return {
        ...commonFields,
        archiveId: generateId(), 
    };
};


// ----------------------------------------
// ArchiveService
// ----------------------------------------

export type ArchiveCollectionKey = 'trash' | 'history'; 

/**
 * „Ç¢„Éº„Ç´„Ç§„Éñ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Ôºàtrash/historyÔºâ„Å´ÂØæ„Åô„Çã„Éá„Éº„ÇøÊìç‰Ωú„Çµ„Éº„Éì„Çπ
 */
export const archiveService = {
    
    async fetchAllItemsFromArchive<T>(
        collectionKey: ArchiveCollectionKey,
        converter: (dbRecord: DBArchive) => T
    ): Promise<T[]> {
        console.log(`[ArchiveService:fetchAll] üîç Fetching from archive: ${collectionKey}`);
        
        try {
            const items = await fetchAllItemsFromCollection<T, DBArchive>(
                collectionKey as DbCollectionName,
                converter as (dbRecord: DBArchive) => T 
            );
            return items;
        } catch (error) {
            console.error(`[ArchiveService:fetchAll] ‚ùå Failed to fetch from archive ${collectionKey}:`, error);
            throw error;
        }
    },
    
    async fetchItemsByIdsFromArchive<T>(
        archiveIds: string[], // Á¨¨‰∏ÄÂºïÊï∞ (Á∂≠ÊåÅ)
        collectionKey: ArchiveCollectionKey,
        converter: (dbRecord: DBArchive) => T,
    ): Promise<(T | null)[]> {
        
        if (archiveIds.length === 0) return [];

        console.log(`[ArchiveService:fetchByIds] üîç Fetching ${archiveIds.length} converted items from archive ${collectionKey} (Bulk).`);
            
        try {
            const items = await bulkFetchItemsByIdsFromCollection<T, DBArchive>(
                archiveIds,
                collectionKey as DbCollectionName, 
                converter 
            );
            
            return items;
            
        } catch (error) {
            const idList = archiveIds.slice(0, 3).join(', ');
            console.error(`[ArchiveService:fetchByIds] ‚ùå Failed to fetch items [${idList}...] from archive ${collectionKey}:`, error);
            throw error;
        }
    },
    
    /**
     * Áîü„ÅÆDBArchive„É¨„Ç≥„Éº„Éâ„Çí‰∏ÄÊã¨ÂèñÂæó„Åô„Çã„Åü„ÇÅ„ÅÆÂ∞ÇÁî®„É°„ÇΩ„ÉÉ„Éâ
     * Converter„Çí‰ΩøÁî®„Åõ„Åö„ÄÅDBArchive„É¨„Ç≥„Éº„Éâ„Åù„ÅÆ„ÇÇ„ÅÆ„ÇíËøî„Åô„ÄÇ
     */
    async fetchRawItemsByIdsFromArchive(
        archiveIds: string[], // Á¨¨‰∏ÄÂºïÊï∞ (Á∂≠ÊåÅ)
        collectionKey: ArchiveCollectionKey,
    ): Promise<(DBArchive | null)[]> {
        
        const rawConverter = (dbRecord: DBArchive) => dbRecord;
        
        // fetchItemsByIdFromArchive „ÇíÂëº„Å≥Âá∫„Åô
        const results = await this.fetchItemsByIdsFromArchive<DBArchive>(
            archiveIds, 
            collectionKey, 
            rawConverter
        );
        
        return results;
    },
    
    async saveItemsToArchive(
        collectionKey: ArchiveCollectionKey,
        itemsToArchive: Array<{ 
            itemType: ArchiveItemType, 
            itemId: string, 
            data: any 
        }>
    ): Promise<void> {
        if (itemsToArchive.length === 0) return;

        console.log(`[ArchiveService:saveItems] üíæ Saving ${itemsToArchive.length} items to archive ${collectionKey} (Bulk)...`);
        
        try {
            // 1. DBArchive„É¨„Ç≥„Éº„Éâ„ÅÆÈÖçÂàó„ÇíÁîüÊàê
            const recordsToSave: DBArchive[] = itemsToArchive.map(item => 
                createDBArchiveRecord(item.itemId, item.itemType, item.data)
            );

            // 2. bulkPutItemsToCollection „Çí‰ΩøÁî®„Åó„Å¶‰∏ÄÊã¨‰øùÂ≠ò
            await bulkPutItemsToCollection(
                collectionKey as DbCollectionName,
                recordsToSave
            );
            
            console.log(`[ArchiveService:saveItems] ‚úÖ Successfully saved ${itemsToArchive.length} items to archive ${collectionKey}.`);
        } catch (error) {
            console.error(`[ArchiveService:saveItems] ‚ùå Failed to save items to archive ${collectionKey}:`, error);
            throw error;
        }
    },
    
    async deleteItemsFromArchive(
        archiveIds: string[], // Á¨¨‰∏ÄÂºïÊï∞„Å´ÁßªÂãï
        collectionKey: ArchiveCollectionKey, 
    ): Promise<void> { 
        if (archiveIds.length === 0) return;
        
        console.log(`[ArchiveService:deleteItems] üóëÔ∏è Deleting ${archiveIds.length} items from archive ${collectionKey} (Bulk).`);
        try {
            // bulkDeleteItemsFromCollection „Çí‰ΩøÁî®„Åó„Å¶‰∏ÄÊã¨ÂâäÈô§
            await bulkDeleteItemsFromCollection(collectionKey as DbCollectionName, archiveIds);
            
            console.log(`[ArchiveService:deleteItems] ‚úÖ Deleted ${archiveIds.length} items from archive ${collectionKey}.`);
        } catch (error) {
            console.error(`[ArchiveService:deleteItems] ‚ùå Failed to delete items from archive ${collectionKey}:`, error);
            throw error;
        }
    },

    /**
     * History „Åä„Çà„Å≥ Trash „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ GC ÂÆüË°å (Ê±éÁî®Âåñ)
     * @param itemType ÂØæË±°„Ç¢„Ç§„ÉÜ„É†„Çø„Ç§„Éó ('packBundle' | 'deck')
     */
    async runArchiveGarbageCollection(
        itemType: ArchiveItemType 
    ): Promise<void> {
        const trashCollectionName: DbCollectionName = 'trash'; 
        const historyCollectionName: DbCollectionName = 'history';
        
        console.log(`[ArchiveService:runGC] üßπ START running garbage collection for ${itemType}...`);

        // 1. „É¶„Éº„Ç∂„ÉºË®≠ÂÆöÂÖ®‰Ωì„Çí„É≠„Éº„Éâ
        const settings: PersistedUserSettings = await userDataService.getUserSettings();
        
        // 2. GCË®≠ÂÆöÂÄ§„ÅÆËß£Ê±∫ÔºàresolveNumberWithFallback „Çí‰ΩøÁî®„Åó„Å¶„Ç§„É≥„É©„Ç§„É≥ÂåñÔºâ
        
        // Trash „ÅÆË®≠ÂÆöËß£Ê±∫
        const trashTimeLimit = resolveNumberWithFallback(
            settings.gcSettings?.['trash']?.[itemType]?.['timeLimit'],
            ARCHIVE_GC_DEFAULTS['trash'][itemType]['timeLimit']
        );
        const trashMaxSize = resolveNumberWithFallback(
            settings.gcSettings?.['trash']?.[itemType]?.['maxSize'],
            ARCHIVE_GC_DEFAULTS['trash'][itemType]['maxSize']
        );
        
        // History „ÅÆË®≠ÂÆöËß£Ê±∫
        const historyTimeLimit = resolveNumberWithFallback(
            settings.gcSettings?.['history']?.[itemType]?.['timeLimit'],
            ARCHIVE_GC_DEFAULTS['history'][itemType]['timeLimit']
        );
        const historyMaxSize = resolveNumberWithFallback(
            settings.gcSettings?.['history']?.[itemType]?.['maxSize'],
            ARCHIVE_GC_DEFAULTS['history'][itemType]['maxSize']
        );

        // 3. Trash „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ GC ÂÆüË°å
        const deletedTrashCount = await runGarbageCollectionForCollection(
            trashCollectionName, 
            'archivedAt', 
            trashTimeLimit,
            trashMaxSize,
            itemType
        );
        console.log(`[ArchiveService:runGC] Trash GC completed. Deleted: ${deletedTrashCount} (Type: ${itemType})`);

        // 4. History „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ GC ÂÆüË°å
        const deletedHistoryCount = await runGarbageCollectionForCollection(
            historyCollectionName, 
            'archivedAt', 
            historyTimeLimit,
            historyMaxSize,
            itemType
        );
        console.log(`[ArchiveService:runGC] History GC completed. Deleted: ${deletedHistoryCount} (Type: ${itemType})`);
        
        console.log(`[ArchiveService:runGC] ‚úÖ Garbage collection complete.`);
    }
};